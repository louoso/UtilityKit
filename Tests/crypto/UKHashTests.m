#import "UKHashTests.h"
#import "NSData+UKHash.h"

@implementation UKHashTests
@synthesize data;

-(void)setUp {
	const char random[] = {
		0x62, 0xfe, 0xa2, 0x95, 0x40, 0xaa, 0xcf, 0xb1, 0x94, 0x46, 0x1c, 0xf5, 0x8b, 0xcc, 0xbb, 0x07,
		0x63, 0x42, 0xdf, 0x55, 0xfc, 0xcf, 0x56, 0x2c, 0x0f, 0x5c, 0xff, 0x9c, 0xfb, 0x61, 0xd7, 0x57,
		0xbb, 0x6c, 0x48, 0x71, 0x8d, 0x1c, 0x80, 0x1a, 0x8d, 0xbf, 0x4a, 0xef, 0xbf, 0xc4, 0x70, 0x67,
		0xba, 0xd4, 0xb1, 0xee, 0xd6, 0x93, 0xc5, 0x8c, 0x39, 0x5e, 0x6b, 0x94, 0x3f, 0xd9, 0x28, 0x9f,
		0x93, 0xac, 0x00, 0x57, 0xc5, 0x73, 0x4f, 0x37, 0xa1, 0x56, 0xff, 0x06, 0x8d, 0xc6, 0x04, 0x51,
		0xf4, 0x83, 0xec, 0x07, 0x2f, 0x18, 0xce, 0x7d, 0x5d, 0x2e, 0x67, 0x00, 0x6c, 0x5f, 0x66, 0xf9,
		0x47, 0x4a, 0xcf, 0x69, 0xf0, 0xcc, 0x16, 0x5f, 0x10, 0x01, 0x01, 0xc3, 0x8e, 0x28, 0xf8, 0xf3,
		0x66, 0x20, 0x35, 0xf2, 0x43, 0x2c, 0x84, 0x91, 0xbc, 0x5f, 0x1e, 0xeb, 0x60, 0x9f, 0x94, 0x13,
		0x74, 0x81, 0xfd, 0xe4, 0xae, 0xf7, 0x46, 0xed, 0x6f, 0x38, 0x16, 0x39, 0x64, 0xff, 0x5c, 0xde,
		0xa0, 0xb6, 0x85, 0xe7, 0x77, 0x2a, 0x48, 0x10, 0xbb, 0x69, 0x69, 0xc7, 0x85, 0xf3, 0x68, 0x3d,
		0xac, 0x10, 0x82, 0xc7, 0xa0, 0x09, 0x1d, 0xf0, 0x0f, 0x1e, 0x0c, 0x63, 0xd1, 0x94, 0xe7, 0x87,
		0x6d, 0x0e, 0x28, 0xac, 0x7f, 0x20, 0x6d, 0xfb, 0xa0, 0x6d, 0xdb, 0x7f, 0x24, 0x8b, 0x1f, 0x5f,
		0xe4, 0xb1, 0x7e, 0x4f, 0xff, 0x30, 0xcc, 0x3a, 0x24, 0xba, 0x28, 0x8d, 0xa7, 0x13, 0xfd, 0x56,
		0xa9, 0x94, 0x0e, 0xc5, 0x1d, 0xd0, 0x93, 0xa4, 0x14, 0xe6, 0x4e, 0xe2, 0xe0, 0x74, 0x3a, 0xd6,
		0xed, 0x49, 0xa5, 0x5c, 0x6d, 0x2a, 0x25, 0xda, 0x86, 0x7b, 0x09, 0xb1, 0x63, 0x10, 0xa7, 0x2e,
		0x40, 0x2b, 0xa1, 0xa0, 0x38, 0x69, 0x23, 0x33, 0x05, 0x91, 0x8d, 0xdb, 0x65, 0x18, 0x6b, 0x6b
	};
	self.data = [NSArray arrayWithObjects:
				 [NSData data],
				 [NSData dataWithBytesNoCopy:&random length:1 freeWhenDone:NO],
				 [NSData dataWithBytesNoCopy:&random length:sizeof(random) freeWhenDone:NO],
				 nil];
}

-(void)tearDown {
	self.data = nil;
}

-(void)testMD5 {
	const char empty[] = {
		0xd4, 0x1d, 0x8c, 0xd9, 0x8f, 0x00, 0xb2, 0x04, 0xe9, 0x80, 0x09, 0x98, 0xec, 0xf8, 0x42, 0x7e
	};
	const char one[] = {
		0x92, 0xeb, 0x5f, 0xfe, 0xe6, 0xae, 0x2f, 0xec, 0x3a, 0xd7, 0x1c, 0x77, 0x75, 0x31, 0x57, 0x8f
	};
	const char full[] = {
		0xee, 0xcd, 0x29, 0xa8, 0x71, 0xa4, 0x41, 0x15, 0x77, 0x0e, 0xc9, 0x3f, 0x36, 0xd5, 0x2b, 0xaa
	};
	NSArray * hashes = [NSArray arrayWithObjects:
						[NSData dataWithBytesNoCopy:&empty length:sizeof(full) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&one length:sizeof(one) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&full length:sizeof(full) freeWhenDone:NO],
						nil];
	
	NSData * test = nil;
	NSString * expected = nil;
	for (int i = 0; i < [self.data count]; i++) {
		test = [self.data objectAtIndex:i];
		expected = [hashes objectAtIndex:i];
		STAssertEqualObjects([test md5], expected, @"\nUnexpected result of md5 hash\n");
	}
}

-(void)testSHA1 {
	const char empty[] = {
		0xda, 0x39, 0xa3, 0xee, 0x5e, 0x6b, 0x4b, 0x0d, 0x32, 0x55, 0xbf, 0xef, 0x95, 0x60, 0x18, 0x90,
		0xaf, 0xd8, 0x07, 0x09
	};
	const char one[] = {
		0xe9, 0xd7, 0x1f, 0x5e, 0xe7, 0xc9, 0x2d, 0x6d, 0xc9, 0xe9, 0x2f, 0xfd, 0xad, 0x17, 0xb8, 0xbd,
		0x49, 0x41, 0x8f, 0x98
	};
	const char full[] = {
		0x65, 0xd8, 0x71, 0x34, 0xb8, 0x34, 0x40, 0xe4, 0x29, 0xd1, 0xea, 0xd5, 0xda, 0xfe, 0x22, 0xa7,
		0xa1, 0xc1, 0x7f, 0x54
	};
	NSArray * hashes = [NSArray arrayWithObjects:
						[NSData dataWithBytesNoCopy:&empty length:sizeof(full) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&one length:sizeof(one) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&full length:sizeof(full) freeWhenDone:NO],
						nil];
	
	NSData * test = nil;
	NSString * expected = nil;
	for (int i = 0; i < [self.data count]; i++) {
		test = [self.data objectAtIndex:i];
		expected = [hashes objectAtIndex:i];
		STAssertEqualObjects([test sha1], expected, @"\nUnexpected result of sha1 hash\n");
	}
}

-(void)testSHA224 {
	const char empty[] = {
		0xd1, 0x4a, 0x02, 0x8c, 0x2a, 0x3a, 0x2b, 0xc9, 0x47, 0x61, 0x02, 0xbb, 0x28, 0x82, 0x34, 0xc4,
		0x15, 0xa2, 0xb0, 0x1f, 0x82, 0x8e, 0xa6, 0x2a, 0xc5, 0xb3, 0xe4, 0x2f
	};
	const char one[] = {
		0xc6, 0x81, 0xe1, 0x8b, 0x81, 0xed, 0xaf, 0x2b, 0x66, 0xdd, 0x22, 0x37, 0x67, 0x34, 0xdb, 0xa5,
		0x99, 0x2e, 0x36, 0x2b, 0xc3, 0xf9, 0x1a, 0xb2, 0x25, 0x85, 0x4c, 0x17
	};
	const char full[] = {
		0x6b, 0xe2, 0xa1, 0x1e, 0x07, 0xb3, 0x56, 0x6f, 0x4c, 0x4e, 0x94, 0xd2, 0xab, 0x31, 0xad, 0xd9,
		0x25, 0x3b, 0x36, 0x5d, 0x62, 0xd9, 0xc1, 0x99, 0x70, 0x73, 0x13, 0x36
	};
	NSArray * hashes = [NSArray arrayWithObjects:
						[NSData dataWithBytesNoCopy:&empty length:sizeof(full) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&one length:sizeof(one) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&full length:sizeof(full) freeWhenDone:NO],
						nil];
	
	NSData * test = nil;
	NSString * expected = nil;
	for (int i = 0; i < [self.data count]; i++) {
		test = [self.data objectAtIndex:i];
		expected = [hashes objectAtIndex:i];
		STAssertEqualObjects([test sha224], expected, @"\nUnexpected result of sha224 hash\n");
	}
}

-(void)testSHA256 {
	const char empty[] = {
		0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24,
		0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55
	};
	const char one[] = {
		0x3e, 0x23, 0xe8, 0x16, 0x00, 0x39, 0x59, 0x4a, 0x33, 0x89, 0x4f, 0x65, 0x64, 0xe1, 0xb1, 0x34,
		0x8b, 0xbd, 0x7a, 0x00, 0x88, 0xd4, 0x2c, 0x4a, 0xcb, 0x73, 0xee, 0xae, 0xd5, 0x9c, 0x00, 0x9d
	};
	const char full[] = {
		0x8a, 0x18, 0x05, 0x37, 0x67, 0x67, 0x9a, 0xf2, 0x5c, 0x1a, 0xd9, 0xe7, 0xd7, 0x5c, 0xab, 0xdb,
		0x8c, 0x13, 0x98, 0xaa, 0x25, 0xf6, 0x7d, 0x5d, 0xaf, 0xbb, 0x55, 0x9c, 0x8f, 0xfe, 0xb7, 0x42
	};
	NSArray * hashes = [NSArray arrayWithObjects:
						[NSData dataWithBytesNoCopy:&empty length:sizeof(full) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&one length:sizeof(one) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&full length:sizeof(full) freeWhenDone:NO],
						nil];
	
	NSData * test = nil;
	NSString * expected = nil;
	for (int i = 0; i < [self.data count]; i++) {
		test = [self.data objectAtIndex:i];
		expected = [hashes objectAtIndex:i];
		STAssertEqualObjects([test sha256], expected, @"\nUnexpected result of sha256 hash\n");
	}
}

-(void)testSHA384 {
	const char empty[] = {
		0x38, 0xb0, 0x60, 0xa7, 0x51, 0xac, 0x96, 0x38, 0x4c, 0xd9, 0x32, 0x7e, 0xb1, 0xb1, 0xe3, 0x6a,
		0x21, 0xfd, 0xb7, 0x11, 0x14, 0xbe, 0x07, 0x43, 0x4c, 0x0c, 0xc7, 0xbf, 0x63, 0xf6, 0xe1, 0xda,
		0x27, 0x4e, 0xde, 0xbf, 0xe7, 0x6f, 0x65, 0xfb, 0xd5, 0x1a, 0xd2, 0xf1, 0x48, 0x98, 0xb9, 0x5b
	};
	const char one[] = {
		0x98, 0xa9, 0x06, 0x18, 0x2c, 0xdc, 0xfb, 0x1e, 0xb4, 0xeb, 0x47, 0x11, 0x76, 0x00, 0xf6, 0x89,
		0x58, 0xe2, 0xdd, 0xd1, 0x40, 0x24, 0x8b, 0x47, 0x98, 0x4f, 0x4b, 0xde, 0x65, 0x87, 0xb8, 0x9c,
		0x82, 0x15, 0xc3, 0xda, 0x89, 0x5a, 0x33, 0x6e, 0x94, 0xad, 0x1a, 0xca, 0x39, 0x01, 0x5c, 0x40
	};
	const char full[] = {
		0x9f, 0xe0, 0x7e, 0x27, 0x4e, 0x54, 0x4c, 0xce, 0x97, 0x42, 0x90, 0xf2, 0x16, 0xae, 0xfe, 0x94,
		0x8d, 0x43, 0xce, 0x48, 0xaf, 0xc0, 0xb1, 0x0b, 0x2d, 0x30, 0x27, 0xd2, 0xcc, 0xd3, 0x8c, 0xa0,
		0xd2, 0x11, 0x03, 0x33, 0x48, 0xc2, 0x9f, 0xf2, 0x09, 0x2e, 0x53, 0x72, 0xe0, 0x71, 0x9d, 0xa5
	};
	NSArray * hashes = [NSArray arrayWithObjects:
						[NSData dataWithBytesNoCopy:&empty length:sizeof(full) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&one length:sizeof(one) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&full length:sizeof(full) freeWhenDone:NO],
						nil];
	
	NSData * test = nil;
	NSString * expected = nil;
	for (int i = 0; i < [self.data count]; i++) {
		test = [self.data objectAtIndex:i];
		expected = [hashes objectAtIndex:i];
		STAssertEqualObjects([test sha384], expected, @"\nUnexpected result of sha384 hash\n");
	}
}

-(void)testSHA512 {
	const char empty[] = {
		0xcf, 0x83, 0xe1, 0x35, 0x7e, 0xef, 0xb8, 0xbd, 0xf1, 0x54, 0x28, 0x50, 0xd6, 0x6d, 0x80, 0x07,
		0xd6, 0x20, 0xe4, 0x05, 0x0b, 0x57, 0x15, 0xdc, 0x83, 0xf4, 0xa9, 0x21, 0xd3, 0x6c, 0xe9, 0xce,
		0x47, 0xd0, 0xd1, 0x3c, 0x5d, 0x85, 0xf2, 0xb0, 0xff, 0x83, 0x18, 0xd2, 0x87, 0x7e, 0xec, 0x2f,
		0x63, 0xb9, 0x31, 0xbd, 0x47, 0x41, 0x7a, 0x81, 0xa5, 0x38, 0x32, 0x7a, 0xf9, 0x27, 0xda, 0x3e
	};
	const char one[] = {
		0x52, 0x67, 0x76, 0x88, 0x22, 0xee, 0x62, 0x4d, 0x48, 0xfc, 0xe1, 0x5e, 0xc5, 0xca, 0x79, 0xcb,
		0xd6, 0x02, 0xcb, 0x7f, 0x4c, 0x21, 0x57, 0xa5, 0x16, 0x55, 0x69, 0x91, 0xf2, 0x2e, 0xf8, 0xc7,
		0xb5, 0xef, 0x7b, 0x18, 0xd1, 0xff, 0x41, 0xc5, 0x93, 0x70, 0xef, 0xb0, 0x85, 0x86, 0x51, 0xd4,
		0x4a, 0x93, 0x6c, 0x11, 0xb7, 0xb1, 0x44, 0xc4, 0x8f, 0xe0, 0x4d, 0xf3, 0xc6, 0xa3, 0xe8, 0xda
	};
	const char full[] = {
		0x2e, 0x27, 0xc2, 0x81, 0xab, 0xb6, 0x09, 0xbe, 0xb5, 0xda, 0xa9, 0xdb, 0xf8, 0x03, 0xa8, 0xb4,
		0x92, 0x67, 0xbb, 0xf4, 0xa4, 0xc0, 0x91, 0x8c, 0x98, 0xf4, 0x1e, 0x54, 0xef, 0xfc, 0x5e, 0xa2,
		0x8c, 0x33, 0xf8, 0xfd, 0xaa, 0xfb, 0x50, 0xd1, 0xf8, 0xf4, 0x4d, 0x11, 0xbd, 0xe0, 0x29, 0xbd,
		0xf6, 0xfe, 0x64, 0x08, 0xe6, 0xae, 0xe7, 0x01, 0x01, 0x44, 0x65, 0x3c, 0x88, 0xe1, 0x52, 0xa2
	};
	NSArray * hashes = [NSArray arrayWithObjects:
						[NSData dataWithBytesNoCopy:&empty length:sizeof(full) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&one length:sizeof(one) freeWhenDone:NO],
						[NSData dataWithBytesNoCopy:&full length:sizeof(full) freeWhenDone:NO],
						nil];
	
	NSData * test = nil;
	NSString * expected = nil;
	for (int i = 0; i < [self.data count]; i++) {
		test = [self.data objectAtIndex:i];
		expected = [hashes objectAtIndex:i];
		STAssertEqualObjects([test sha512], expected, @"\nUnexpected result of sha512 hash\n");
	}
}

@end
